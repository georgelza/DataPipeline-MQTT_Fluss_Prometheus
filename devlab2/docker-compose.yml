# if our project is called and network is called pipeline
#
# docker-compose -p pipeline up -d --build
# or
# export COMPOSE_PROJECT_NAME=pipeline
# docker-compose up -d --build
#
# inspect network: docker network inspect pipeline
#

configs:
  hive-site:
    file: ./conf/hive-site.xml
  flink-conf:
    file: ./conf/config.yaml

  log4j:
    file: ./conf/log4j.properties
  log4j-console:
    file: ./conf/log4j-console.properties
  log4j-session:
    file: ./conf/log4j-session.properties

  postgres_conf:
    file: ./conf/postgresql.conf
  postgres_hba:
    file: ./conf/pg_hba.conf

services:

  # Eclips Misquito Broker
  mqtt_broker_north:
    image: eclipse-mosquitto:latest
    container_name: broker_north
    hostname: broker_north
    ports: 
      - 1883:1883
    volumes:
      - ./conf/mqtt/north:/mosquitto/config
      - ./data/mqtt/north/data:/mosquitto/data
      - ./data/mqtt/north/log:/mosquitto/log

  mqtt_broker_south:
    image: eclipse-mosquitto:latest
    container_name: broker_south
    hostname: broker_south
    ports: 
      - 1884:1884
    volumes:
      - ./conf/mqtt/south:/mosquitto/config
      - ./data/mqtt/south/data:/mosquitto/data
      - ./data/mqtt/south/log:/mosquitto/log

  mqtt_broker_east:
    image: eclipse-mosquitto:latest
    container_name: broker_east
    hostname: broker_east
    ports: 
      - 1885:1885
    volumes:
      - ./conf/mqtt/east:/mosquitto/config
      - ./data/mqtt/east/data:/mosquitto/data
      - ./data/mqtt/east/log:/mosquitto/log


  #begin Fluss cluster
  coordinator-server:
    image: fluss/fluss:0.6.0
    container_name: coordinator-server
    hostname: coordinator-server
    ports:
      - "9123:9123"
    depends_on:
      - zookeeper
      - namenode
      - resourcemanager
      - historyserver
      - nodemanager1
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          coordinator.host: coordinator-server
          remote.data.dir: hdfs://namenode:9000/data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss:/tmp/fluss
      - ./creFlinkFlows:/shell
    command: coordinatorServer

  tablet-server-0:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-0
    container_name: tablet-server-0
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-0
          tablet-server.id: 0
          tablet-server.port: 9124
          data.dir: /tmp/fluss/data/tablet-server-0
          kv.snapshot.interval: 0s
          remote.data.dir: hdfs://namenode:9000/data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss:/tmp/fluss
    command: tabletServer

  tablet-server-1:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-1
    container_name: tablet-server-1
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-1
          tablet-server.id: 1
          tablet-server.port: 9125
          data.dir: /tmp/fluss/data/tablet-server-1
          kv.snapshot.interval: 0s
          remote.data.dir: hdfs://namenode:9000/data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss:/tmp/fluss
    command: tabletServer

  tablet-server-2:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-2
    container_name: tablet-server-2
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-2
          tablet-server.id: 2
          tablet-server.port: 9126
          data.dir: /tmp/fluss/data/tablet-server-2
          kv.snapshot.interval: 0s
          remote.data.dir: hdfs://namenode:9000/data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss:/tmp/fluss
    command: tabletServer

  zookeeper:
    restart: always
    image: zookeeper:3.9.2
  
  #end

  #begin Flink cluster
  jobmanager:
    image: ${REPO_NAME}/apacheflink:1.20.1-scala_2.12-java17
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - "8083:8081"

    volumes:
      - ./data/paimon:/tmp/paimon
      - ./creFlinkFlows:/sql

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: jobmanager

  taskmanager:
    image: ${REPO_NAME}/apacheflink:1.20.1-scala_2.12-java17
    depends_on:
      - jobmanager
    deploy:
      replicas: 1
    environment:
      - env.log.level=DEBUG

    volumes:
      - ./data/paimon:/tmp/paimon

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: taskmanager

  #end

  # First we will start with a local (HDFS) file based Catalog for Apache Paimon

  #### Hadoop / HDFS ####
  #
  # The Namenode UI can be accessed at http://localhost:9870/⁠ and 
  # the ResourceManager UI can be accessed at http://localhost:8089/⁠
  namenode:
    image: ${REPO_NAME}/hadoop-namenode-3.3.5-java11:1.0.0
    hostname: namenode
    container_name: namenode
    volumes:
      - ./data/hdfs/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    env_file:
      - ./conf/hadoop.env
    ports:
      - "9870:9870"   # NameNode Web UI
      - "9000:9000"

  resourcemanager:
    image: ${REPO_NAME}/hadoop-resourcemanager-3.3.5-java11:1.0.0
    container_name: resourcemanager
    hostname: resourcemanager
    restart: on-failure
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3
      - datanode4
      - datanode5
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    env_file:
      - ./conf/hadoop.env
    ports:
      - "8089:8088" # Resource Manager Web UI
  
  historyserver:
    image: ${REPO_NAME}/hadoop-historyserver-3.3.5-java11:1.0.0
    container_name: historyserver
    hostname: historyserver
    depends_on:
      - namenode
      - datanode1
      - datanode2
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    volumes:
      - ./data/hdfs/historyserver:/hadoop/yarn/timeline
    env_file:
      - ./conf/hadoop.env
    ports:
      - "8188:8188"
  
  nodemanager1:
    image: ${REPO_NAME}/hadoop-nodemanager-3.3.5-java11:1.0.0
    container_name: nodemanager1
    hostname: nodemanager1
    depends_on:
      - namenode
      - datanode1
      - datanode2
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    env_file:
      - ./conf/hadoop.env
    ports:
      - "8042:8042"   # NodeManager Web UI
  
  datanode1:
    image: ${REPO_NAME}/hadoop-datanode-3.3.5-java11:1.0.0
    container_name: datanode1
    hostname: datanode1
    depends_on:
      - namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    volumes:
      - ./data/hdfs/datanode1:/hadoop/dfs/data
    env_file:
      - ./conf/hadoop.env
  
  datanode2:
    image: ${REPO_NAME}/hadoop-datanode-3.3.5-java11:1.0.0
    container_name: datanode2
    hostname: datanode2
    depends_on:
      - namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    volumes:
      - ./data/hdfs/datanode2:/hadoop/dfs/data
    env_file:
      - ./conf/hadoop.env
  
  datanode3:
    image: ${REPO_NAME}/hadoop-datanode-3.3.5-java11:1.0.0
    container_name: datanode3
    hostname: datanode3
    depends_on:
      - namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    volumes:
      - ./data/hdfs/datanode3:/hadoop/dfs/data
    env_file:
      - ./conf/hadoop.env

  datanode4:
    image: ${REPO_NAME}/hadoop-datanode-3.3.5-java11:1.0.0
    container_name: datanode4
    hostname: datanode4
    depends_on:
      - namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
    volumes:
      - ./data/hdfs/datanode4:/hadoop/dfs/data
    env_file:
      - ./conf/hadoop.env
      
  datanode5:
    image: ${REPO_NAME}/hadoop-datanode-3.3.5-java11:1.0.0
    container_name: datanode5
    hostname: datanode5
    depends_on:
      - namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}  
    volumes:
      - ./data/hdfs/datanode5:/hadoop/dfs/data
    env_file:
      - ./conf/hadoop.env


  # Datastore for Hive Metastore 
  postgres:
    image: ${REPO_NAME}/postgres:12.0
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${DATABASE_PORT}:5432
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_DB}
    healthcheck:
      test: ["CMD", "psql", "-U", "${DATABASE_USER}", "${DATABASE_DB}"]
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  # Hive Metastore 3.1.3
  # HADOOP_VERSION=3.3.5
  # POSTGRES_CONNECTOR_VERSION=42.7.3
  #
  # Launch Standalone Metastore With External RDBMS (Postgres)
  # If you want to use your own core-site.xml/hdfs-site.xml/yarn-site.xml or hive-site.xml for the service, 
  # you can provide the environment variable HIVE_CUSTOM_CONF_DIR for the command. For example:
  # Put the custom configuration file under the directory /opt/hive/conf and run:
  metastore:
    image: ${REPO_NAME}/hive-metastore-3.1.3-java8:1.0.0
    hostname: metastore
    container_name: metastore
    restart: unless-stopped
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: ${DATABASE_TYPE_JDBC}
      IS_RESUME: "true"
      SERVICE_OPTS: '-Xmx512m 
                    -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
                    -Djavax.jdo.option.ConnectionURL=jdbc:${DATABASE_TYPE_JDBC}://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}?sslmode=disable
                    -Djavax.jdo.option.ConnectionUserName=${DATABASE_USER}
                    -Djavax.jdo.option.ConnectionPassword=${DATABASE_PASSWORD}'
    env_file:
      - ./conf/hive.env
    ports:
      - 9083:9083   # Hive Metastore access port
    depends_on:
      - postgres
#      - mc
    command: hivemetastore


  # Using HS2 with Standalone/Remote Metastore
  # "-Dhive.metastore.uris is used to specify the external Metastore
  # NOTE: To save the data between container restarts, you can start the HiveServer2 with mounted volume:
  hiveserver2:
    image: ${REPO_NAME}/hive-hiveserver2-3.1.3-java8:1.0.0
    hostname: hiveserver2
    container_name: hiveserver2
    restart: unless-stopped
    environment:
      - SERVICE_NAME=hiveserver2
      - IS_RESUME="true"
      - SERVICE_OPTS='-Xmx512m 
                    -Dhive.metastore.uris=thrift://metastore:9083'
    env_file:
      - ./conf/hive.env
    ports:
      - 10000:10000   # Hive server2 port
      - 10001:10001
      - 10002:10002   # HiveServer2 Web UI
    depends_on:
      - metastore
    command: hiveserver


# IOT Payload generator -> Dockerrized
#
# in the Volumes, you can point all the configs to the single app_iot1/conf and commond share it or you can 
# place a site specific config file into each folder and then configure each of the data gens to use it's own specific
# configuration file
  iot1_mqtt:
    image: ${REPO_NAME}/iot_datagen:4.0
    hostname: iot1_mqtt
    container_name: iot1_mqtt
    environment:
      MQTT_BROKER_HOST: broker_north
      MQTT_BROKER_PORT: 1883
      MQTT_TOPIC: factory_iot
      MQTT_CLIENTTAG: factory_north
      TIMESTAMP_FIELD: ${TIMESTAMP_FIELD}
      METADATA_FIELD: ${METADATA_FIELD}
      RETENSION_LEVEL: ${RETENSION_LEVEL}
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 101,104
      LOGDIR: logs
      LOGGINGFILE: logger_north
      TSHUMAN: 0
      STRUCTMOD: 0
      DEVICETYPE: 0

    volumes:
      - ../app_mqttiot1/conf/:/app/conf
      - ../app_mqttiot1/logs/:/app/logs

  iot2_mqtt:
    image: ${REPO_NAME}/iot_datagen:4.0
    hostname: iot2_mqtt
    container_name: iot2_mqtt
    environment:
      MQTT_BROKER_HOST: broker_south
      MQTT_BROKER_PORT: 1884
      MQTT_TOPIC: factory_iot
      MQTT_CLIENTTAG: factory_south
      TIMESTAMP_FIELD: ${TIMESTAMP_FIELD}
      METADATA_FIELD: ${METADATA_FIELD}
      RETENSION_LEVEL: ${RETENSION_LEVEL}
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 102,105
      LOGDIR: logs
      LOGGINGFILE: logger_south
      TSHUMAN: 1
      STRUCTMOD: 1
      DEVICETYPE: 0

    volumes:
      - ../app_mqttiot2/conf/:/app/conf
      - ../app_mqttiot2/logs/:/app/logs

  iot3_mqtt:
    image: ${REPO_NAME}/iot_datagen:4.0
    hostname: iot3_mqtt
    container_name: iot3_mqtt
    environment:
      MQTT_BROKER_HOST: broker_east
      MQTT_BROKER_PORT: 1885
      MQTT_TOPIC: factory_iot
      MQTT_CLIENTTAG: factory_east
      TIMESTAMP_FIELD: ${TIMESTAMP_FIELD}
      METADATA_FIELD: ${METADATA_FIELD}
      RETENSION_LEVEL: ${RETENSION_LEVEL}
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 103,106
      LOGDIR: logs
      LOGGINGFILE: logger_east
      TSHUMAN: 1
      STRUCTMOD: 1
      DEVICETYPE: 1

    volumes:
      - ../app_mqttiot3/conf/:/app/conf
      - ../app_mqttiot3/logs/:/app/logs

# Without a network explicitly defined, you hit this Hive/Thrift error
# java.net.URISyntaxException Illegal character in hostname
# https://github.com/TrivadisPF/platys-modern-data-platform/issues/231
networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}
